function u0:0(i64, i64) -> i64 system_v {
    sig0 = (i64, i64) -> i64 system_v
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64):
    v14 -> v0
    v31 -> v0
    v2 = iconst.i64 32
    v3 = icmp sle v2, v1  ; v2 = 32
    v4 = icmp sgt v1, v0
    v5 = band v3, v4
    v6 = iconst.i8 0
    v7 = bor v5, v6  ; v6 = 0
    brif v7, block1, block2

block1:
    v8 = call fn0(v1, v0)
    return v8

block2:
    v9 = iconst.i64 0
    jump block3(v1, v9)  ; v9 = 0

block3(v10: i64, v13: i64):
    v11 = iconst.i64 3
    v12 = icmp sge v10, v11  ; v11 = 3
    brif v12, block4, block5

block4:
    v15 = isub.i64 v14, v14
    v16 = iconst.i64 2
    v17 = imul v16, v14  ; v16 = 2
    v18 = iadd v15, v17
    v19 = iadd v18, v14
    v20 = iadd.i64 v13, v19
    v21 = iconst.i64 3
    v22 = isub.i64 v10, v21  ; v21 = 3
    jump block3(v22, v20)

block5:
    v23 = iconst.i64 0
    jump block6(v10, v13)

block6(v24: i64, v30: i64):
    v25 = iconst.i64 1
    v26 = icmp sge v24, v25  ; v25 = 1
    v27 = iconst.i64 0
    v28 = icmp ne v25, v27  ; v25 = 1, v27 = 0
    v29 = band v26, v28
    brif v29, block7, block8

block7:
    v32 = iadd.i64 v30, v31
    v33 = iconst.i64 1
    v34 = isub.i64 v24, v33  ; v33 = 1
    jump block6(v34, v32)

block8:
    v35 = iconst.i64 0
    return v30
}
