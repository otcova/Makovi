function u0:0(i64) -> i64 system_v {
block0(v0: i64):
    v18 -> v0
    v1 = iconst.i64 2
    v2 = urem v0, v1  ; v1 = 2
    v3 = iconst.i64 0
    v4 = icmp eq v2, v3  ; v3 = 0
    brif v4, block1, block2

block1:
    v5 = iconst.i64 2
    return v5  ; v5 = 2

block2:
    v6 = iconst.i64 3
    v7 = urem.i64 v0, v6  ; v6 = 3
    v8 = iconst.i64 0
    v9 = icmp eq v7, v8  ; v8 = 0
    brif v9, block4, block5

block4:
    v10 = iconst.i64 3
    return v10  ; v10 = 3

block5:
    v11 = iconst.i64 5
    v12 = urem.i64 v0, v11  ; v11 = 5
    v13 = iconst.i64 0
    v14 = icmp eq v12, v13  ; v13 = 0
    brif v14, block7, block8

block7:
    v15 = iconst.i64 5
    return v15  ; v15 = 5

block8:
    jump block6

block6:
    jump block3

block3:
    v16 = iconst.i64 7
    jump block9(v16)  ; v16 = 7

block9(v17: i64):
    v19 = iconst.i64 5
    v20 = udiv.i64 v18, v19  ; v19 = 5
    v21 = icmp slt v17, v20
    brif v21, block10, block11

block10:
    v22 = urem.i64 v18, v17
    v23 = iconst.i64 0
    v24 = icmp eq v22, v23  ; v23 = 0
    brif v24, block12, block13

block12:
    return v17

block13:
    v25 = iconst.i64 3
    v26 = iadd.i64 v17, v25  ; v25 = 3
    v27 = urem.i64 v18, v26
    v28 = iconst.i64 0
    v29 = icmp eq v27, v28  ; v28 = 0
    brif v29, block15, block16

block15:
    v30 = iconst.i64 3
    v31 = iadd.i64 v17, v30  ; v30 = 3
    return v31

block16:
    v32 = iconst.i64 6
    v33 = iadd.i64 v17, v32  ; v32 = 6
    v34 = urem.i64 v18, v33
    v35 = iconst.i64 0
    v36 = icmp eq v34, v35  ; v35 = 0
    brif v36, block18, block19

block18:
    v37 = iconst.i64 6
    v38 = iadd.i64 v17, v37  ; v37 = 6
    return v38

block19:
    v39 = iconst.i64 10
    v40 = iadd.i64 v17, v39  ; v39 = 10
    v41 = urem.i64 v18, v40
    v42 = iconst.i64 0
    v43 = icmp eq v41, v42  ; v42 = 0
    brif v43, block21, block22

block21:
    v44 = iconst.i64 10
    v45 = iadd.i64 v17, v44  ; v44 = 10
    return v45

block22:
    v46 = iconst.i64 12
    v47 = iadd.i64 v17, v46  ; v46 = 12
    v48 = urem.i64 v18, v47
    v49 = iconst.i64 0
    v50 = icmp eq v48, v49  ; v49 = 0
    brif v50, block24, block25

block24:
    v51 = iconst.i64 12
    v52 = iadd.i64 v17, v51  ; v51 = 12
    return v52

block25:
    v53 = iconst.i64 16
    v54 = iadd.i64 v17, v53  ; v53 = 16
    v55 = urem.i64 v18, v54
    v56 = iconst.i64 0
    v57 = icmp eq v55, v56  ; v56 = 0
    brif v57, block27, block28

block27:
    v58 = iconst.i64 16
    v59 = iadd.i64 v17, v58  ; v58 = 16
    return v59

block28:
    v60 = iconst.i64 22
    v61 = iadd.i64 v17, v60  ; v60 = 22
    v62 = urem.i64 v18, v61
    v63 = iconst.i64 0
    v64 = icmp eq v62, v63  ; v63 = 0
    brif v64, block30, block31

block30:
    v65 = iconst.i64 22
    v66 = iadd.i64 v17, v65  ; v65 = 22
    return v66

block31:
    v67 = iconst.i64 24
    v68 = iadd.i64 v17, v67  ; v67 = 24
    v69 = urem.i64 v18, v68
    v70 = iconst.i64 0
    v71 = icmp eq v69, v70  ; v70 = 0
    brif v71, block33, block34

block33:
    v72 = iconst.i64 24
    v73 = iadd.i64 v17, v72  ; v72 = 24
    return v73

block34:
    v74 = iconst.i64 30
    v75 = iadd.i64 v17, v74  ; v74 = 30
    v76 = urem.i64 v18, v75
    v77 = iconst.i64 0
    v78 = icmp eq v76, v77  ; v77 = 0
    brif v78, block36, block37

block36:
    v79 = iconst.i64 30
    v80 = iadd.i64 v17, v79  ; v79 = 30
    return v80

block37:
    v81 = iconst.i64 30
    v82 = iadd.i64 v17, v81  ; v81 = 30
    jump block38

block38:
    jump block35

block35:
    jump block32

block32:
    jump block29

block29:
    jump block26

block26:
    jump block23

block23:
    jump block20

block20:
    jump block17

block17:
    jump block14

block14:
    jump block9(v82)

block11:
    v83 = iconst.i64 0
    return v18
}
