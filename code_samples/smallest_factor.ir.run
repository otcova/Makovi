function u0:0(i64) -> i64 system_v {
block0(v0: i64):
    v19 -> v0
    v1 = iconst.i64 0
    v2 = iconst.i64 2
    v3 = urem v0, v2  ; v2 = 2
    v4 = iconst.i64 0
    v5 = icmp eq v3, v4  ; v4 = 0
    brif v5, block1, block2

block1:
    v6 = iconst.i64 2
    return v6  ; v6 = 2

block2:
    v7 = iconst.i64 3
    v8 = urem.i64 v0, v7  ; v7 = 3
    v9 = iconst.i64 0
    v10 = icmp eq v8, v9  ; v9 = 0
    brif v10, block4, block5

block4:
    v11 = iconst.i64 3
    return v11  ; v11 = 3

block5:
    v12 = iconst.i64 5
    v13 = urem.i64 v0, v12  ; v12 = 5
    v14 = iconst.i64 0
    v15 = icmp eq v13, v14  ; v14 = 0
    brif v15, block7, block8

block7:
    v16 = iconst.i64 5
    return v16  ; v16 = 5

block8:
    v17 = iconst.i64 7
    jump block10(v17)  ; v17 = 7

block10(v18: i64):
    v20 = icmp slt v18, v19
    brif v20, block11, block12

block11:
    v21 = urem.i64 v19, v18
    v22 = iconst.i64 0
    v23 = icmp eq v21, v22  ; v22 = 0
    brif v23, block13, block14

block13:
    return v18

block14:
    v24 = iconst.i64 3
    v25 = iadd.i64 v18, v24  ; v24 = 3
    v26 = urem.i64 v19, v25
    v27 = iconst.i64 0
    v28 = icmp eq v26, v27  ; v27 = 0
    brif v28, block16, block17

block16:
    v29 = iconst.i64 3
    v30 = iadd.i64 v18, v29  ; v29 = 3
    return v30

block17:
    v31 = iconst.i64 6
    v32 = iadd.i64 v18, v31  ; v31 = 6
    v33 = urem.i64 v19, v32
    v34 = iconst.i64 0
    v35 = icmp eq v33, v34  ; v34 = 0
    brif v35, block19, block20

block19:
    v36 = iconst.i64 6
    v37 = iadd.i64 v18, v36  ; v36 = 6
    return v37

block20:
    v38 = iconst.i64 10
    v39 = iadd.i64 v18, v38  ; v38 = 10
    v40 = urem.i64 v19, v39
    v41 = iconst.i64 0
    v42 = icmp eq v40, v41  ; v41 = 0
    brif v42, block22, block23

block22:
    v43 = iconst.i64 10
    v44 = iadd.i64 v18, v43  ; v43 = 10
    return v44

block23:
    v45 = iconst.i64 12
    v46 = iadd.i64 v18, v45  ; v45 = 12
    v47 = urem.i64 v19, v46
    v48 = iconst.i64 0
    v49 = icmp eq v47, v48  ; v48 = 0
    brif v49, block25, block26

block25:
    v50 = iconst.i64 12
    v51 = iadd.i64 v18, v50  ; v50 = 12
    return v51

block26:
    v52 = iconst.i64 16
    v53 = iadd.i64 v18, v52  ; v52 = 16
    v54 = urem.i64 v19, v53
    v55 = iconst.i64 0
    v56 = icmp eq v54, v55  ; v55 = 0
    brif v56, block28, block29

block28:
    v57 = iconst.i64 16
    v58 = iadd.i64 v18, v57  ; v57 = 16
    return v58

block29:
    v59 = iconst.i64 22
    v60 = iadd.i64 v18, v59  ; v59 = 22
    v61 = urem.i64 v19, v60
    v62 = iconst.i64 0
    v63 = icmp eq v61, v62  ; v62 = 0
    brif v63, block31, block32

block31:
    v64 = iconst.i64 22
    v65 = iadd.i64 v18, v64  ; v64 = 22
    return v65

block32:
    v66 = iconst.i64 24
    v67 = iadd.i64 v18, v66  ; v66 = 24
    v68 = urem.i64 v19, v67
    v69 = iconst.i64 0
    v70 = icmp eq v68, v69  ; v69 = 0
    brif v70, block34, block35

block34:
    v71 = iconst.i64 24
    v72 = iadd.i64 v18, v71  ; v71 = 24
    return v72

block35:
    v73 = iconst.i64 30
    v74 = iadd.i64 v18, v73  ; v73 = 30
    v75 = urem.i64 v19, v74
    v76 = iconst.i64 0
    v77 = icmp eq v75, v76  ; v76 = 0
    brif v77, block37, block38

block37:
    v78 = iconst.i64 30
    v79 = iadd.i64 v18, v78  ; v78 = 30
    return v79

block38:
    v80 = iconst.i64 30
    v81 = iadd.i64 v18, v80  ; v80 = 30
    jump block39

block39:
    jump block36

block36:
    jump block33

block33:
    jump block30

block30:
    jump block27

block27:
    jump block24

block24:
    jump block21

block21:
    jump block18

block18:
    jump block15

block15:
    jump block10(v81)

block12:
    v82 = iconst.i64 0
    jump block9

block9:
    jump block6

block6:
    jump block3

block3:
    return v19
}
